// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  walletAddress String          @unique
  user_profile  String          @default("https://wallpapers-clan.com/wp-content/uploads/2022/07/anime-default-pfp-1.jpg")
  metadata      StoryMetadata[]
  Comment       Comment[]
  bio           String          @default("Hi, I am a writer")
  title         String          @default("Writer")
  listedStory   ListedStory[]
  premium       Boolean         @default(false)
}

model StoryMetadata {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  storyName         String       @unique @default("Untitled Story")
  characterName     String
  profile           String
  theme             String
  storytellingStyle String
  ownerId           String       @db.ObjectId
  User              User         @relation(fields: [ownerId], references: [id])
  chapters          Chapter[]
  hash              String       @default("")
  ListedStory       ListedStory?
  ended             Boolean      @default(false)
}

model Chapter {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  metadataId String        @db.ObjectId
  metadata   StoryMetadata @relation(fields: [metadataId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  comments   Comment[]
  bet        Bet?
  locked     Boolean       @default(true)
}

model Bet {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  chapterId String        @unique @db.ObjectId
  chapter   Chapter       @relation(fields: [chapterId], references: [id])
  ques      String
  options   Json
  amount    Int
  createdAt DateTime      @default(now())
  responses BetResponse[]
  ended     Boolean       @default(false)
}

model BetResponse {
  correct   Boolean
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   String   @unique
  betId     String   @db.ObjectId
  createdAt DateTime @default(now())
  Bet       Bet      @relation(fields: [betId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    String   @db.ObjectId
  date      DateTime @default(now())
  owner     User     @relation(fields: [author], references: [id])
  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?  @db.ObjectId
}

model ListedStory {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  storyId  String        @unique @db.ObjectId
  story    StoryMetadata @relation(fields: [storyId], references: [id])
  listedAt DateTime      @default(now())
  pricing  Int
  owner    String        @db.ObjectId
  User     User          @relation(fields: [owner], references: [id])
}

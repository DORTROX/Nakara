// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  walletAddress String          @unique
  Comment       Comment[]
  StoryMetadata StoryMetadata[]
}

model StoryMetadata {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  storyName         String        @unique @default("Untitled Story")
  characterName     String
  profile           String
  theme             String
  storytellingStyle String
  chapters          Chapter[]
  ListedStory       ListedStory[]
  User              User          @relation(fields: [ownerId], references: [id])
  ownerId           String        @db.ObjectId
  hash              String        @default("")        
  // #HIMATODO: Create end
}

model Chapter {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  metadataId String        @db.ObjectId
  metadata   StoryMetadata @relation(fields: [metadataId], references: [id])
  bet        Bet?
  createdAt  DateTime      @default(now())
}

model Bet {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  chapterId String    @unique @db.ObjectId
  chapter   Chapter   @relation(fields: [chapterId], references: [id])
  ques      String
  answer    String
  amount    Int
  comments  Comment[]
}

model Comment {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  betId   String   @db.ObjectId
  bet     Bet      @relation(fields: [betId], references: [id])
  content String
  author  String   @db.ObjectId
  date    DateTime @default(now())
  owner   User     @relation(fields: [author], references: [id])
}

model ListedStory {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  storyId  String        @db.ObjectId
  story    StoryMetadata @relation(fields: [storyId], references: [id])
  listedAt DateTime      @default(now())
  pricing  Int
}
